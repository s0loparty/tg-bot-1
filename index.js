// const TelegramBot = require('node-telegram-bot-api')
// const axios = require('axios')
import TelegramBot from "node-telegram-bot-api"
import axios from "axios"

require('dotenv').config()

const BOT_TOKEN = process.env.BOT_TOKEN
const API_WEATHER = process.env.WEATHER_API

const bot = new TelegramBot(BOT_TOKEN, { polling: true })

const buttons = {
	reply_markup: JSON.stringify({
		inline_keyboard: [
			[{text: '–ö–æ—Ç–∏–∫–∏ üòº', callback_data: 'cat'}, {text: '–ü–æ–≥–æ–¥–∞ üå•', callback_data: 'weather'}]
		]
	})
}

let BOT_TYPE = null // cat / weather

bot.on('message', async event => {
	const { from, chat, text } = event

	if (text === '/start') {
		BOT_TYPE = null
		return bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ \n–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å', buttons)
	}

	switch (BOT_TYPE) {
		case 'cat':
			const data = await axios('https://aws.random.cat/meow')
			bot.sendPhoto(chat.id, data.data.file, { caption: text })
		break

		case 'weather':
			try {
				const response = await axios(`https://api.weatherapi.com/v1/forecast.json?key=${API_WEATHER}&q=${encodeURI(text)}&days=5&aqi=no&alerts=no&lang=ru`)
				
				if (response.status === 200 && response.data) {
					const data = response.data

					data.forecast.forecastday.forEach(i => {
						const day = i.day
						const date = i.date.split('-').reverse().join('.')

						let mess = ''
						mess += `üåè *${day.condition.text}* \n`
						//mess += `üìç –ì–æ—Ä–æ–¥ *${data.location.name}* \n`
						mess += `üìÜ –î–∞—Ç–∞ *${date}* \n`
						mess += `üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ~ *${day.avgtemp_c}¬∞*`

						bot.sendPhoto(chat.id, 'https:' + day.condition.icon, {
							caption: mess,
							parse_mode: 'markdown'
						})
					})
				} else {
					bot.sendMessage(chat.id, 'Whoops!')
				}
			} catch (error) {
				bot.sendMessage(chat.id, `–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (${error.response.status} - ${error.response.statusText})`)
			}
		break
	
		default:
			bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª')
		break
	}
})


bot.on('callback_query', async event => {
	const data = event.data
	const chatID = event.message.chat.id
	
	BOT_TYPE = data

	switch (data) {
		case 'cat':
			bot.sendMessage(chatID, '–ö–æ—Ç–∏–∫–∏ –≤–∞–Ω–ª–∞–≤, –Æ—Ö—É—É—É—É! \n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-—Ç–æ ...')
			break;
		
		case 'weather':
			bot.sendMessage(chatID, '–ü–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–≥–æ–¥—É. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
			break;
	
		default:
			console.log('Wrong callback_data')
			break;
	}
})
